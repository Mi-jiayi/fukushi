{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/cloudbyte-mac2/Downloads/rep/fukushi/src/context/AccountProvider.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { createContext, useContext, useState, ReactNode } from \"react\";\nimport { Account, AccountSchema } from \"../model/schemas\";\n\ntype AccountContextType = {\n  selectedAccount: Account | null;\n  setSelectedAccount: (account: Account | null) => void;\n};\n\n// 创建 Context\nconst AccountContext = createContext<AccountContextType | null>(null);\n\n// 创建一个提供者组件\nexport const AccountProvider = ({ children }: { children: ReactNode }) => {\n  // 选中的用户\n  const [selectedAccount, setSelectedAccount] = useState<Account | null>(null);\n\n  // const updateSelectedAccount = (newAccount: Account) => {\n  //   const parsedData = AccountSchema.parse(newAccount); // 使用 zod 校验\n  //   setSelectedAccount(parsedData);\n  // };\n\n  return (\n    <AccountContext.Provider value={{ selectedAccount, setSelectedAccount }}>\n      {children}\n    </AccountContext.Provider>\n  );\n};\n\n// 自定义 Hook 来访问和更新账户信息\nexport const useAccount = () => {\n  const context = useContext(AccountContext);\n\n  if (!context) {\n    throw new Error(\"useAccount 必须在 AccountProvider 中使用\");\n  }\n\n  return context;\n};\n"],"names":[],"mappings":";;;;;AAEA;AAFA;;;AAUA,aAAa;AACb,MAAM,+BAAiB,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAA6B;AAGzD,MAAM,kBAAkB,CAAC,EAAE,QAAQ,EAA2B;IACnE,QAAQ;IACR,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAkB;IAEvE,2DAA2D;IAC3D,qEAAqE;IACrE,oCAAoC;IACpC,KAAK;IAEL,qBACE,8OAAC,eAAe,QAAQ;QAAC,OAAO;YAAE;YAAiB;QAAmB;kBACnE;;;;;;AAGP;AAGO,MAAM,aAAa;IACxB,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAE3B,IAAI,CAAC,SAAS;QACZ,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO;AACT"}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}